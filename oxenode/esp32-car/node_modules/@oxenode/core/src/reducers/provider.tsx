import React from 'react'

import { nodesReducer, edgeReducer, storeReducer, eventStoreReducer } from './reducers'

import { NodeContext } from '../NodeContext';
import { EdgeContext } from '../EdgeContext';
import { DragContext } from '../DragContext';
import { StoreContext } from '../StoreContext'
import { EventStoreContext } from '../EventStoreContext';

export function NodeStateProvider({ nodes={}, children }: any) {
    const [nodeState, dispatchNode] = React.useReducer(nodesReducer, nodes);

    return (
        <NodeContext.Provider value={{ nodeState, dispatchNode }}>
            { children }
        </NodeContext.Provider>
    )
}

export function EdgeStateProvider({ edges={}, children }: any) {
    const [edgeState, dispatchEdge] = React.useReducer(edgeReducer, edges);

    return (
        <EdgeContext.Provider value={{ edgeState, dispatchEdge }}>
            { children }
        </EdgeContext.Provider>
    )
}

export function DragStateProvider({ children }: any) {
    const [isFocused, setIsFocused] = React.useState<boolean>(false);

    return (
        <DragContext.Provider value={{ isFocused, setIsFocused }}>
            { children }
        </DragContext.Provider>
    )
}

export function StoreStateProvider({ children }: any) {
    const [store, setStoreItem] = React.useReducer(storeReducer, {});

    return (
        <StoreContext.Provider value={{ store, setStoreItem }}>
            { children }
        </StoreContext.Provider>
    )
}
export function EventStoreProvider({ children }: any) {
    const [eventStore, setEventStoreItem] = React.useReducer(eventStoreReducer, {
        'begin': {
            id: 'play'
        }
    });
    
    return (
        <EventStoreContext.Provider value={{ eventStore, setEventStoreItem }}>
            { children }
        </EventStoreContext.Provider>
    )
}