import { TNode, TEdge } from "../types";

export type UpdateNodeStateOptions = {
    name: string;
    value: string;
    node: TNode;
};

export type NodeAction =
    | { type: "CLEAR" }
    | { type: 'RENDER' }
    | { type: "SET_NODES"; payload: Record<string, TNode> }
    | { type: "ADD_NODE"; payload: TNode }
    | { type: "REMOVE_NODE"; payload: string }
    | { type: "UPDATE_NODE"; payload: TNode }
    | { type: "UPDATE_NODE_STATE"; payload: UpdateNodeStateOptions };

export const nodesReducer = (
    state: Record<string, TNode>,
    action: NodeAction
): Record<string, TNode> => {
    switch (action.type) {
        case "CLEAR": {
            return {};
        }
        case "RENDER": {
            return {...state};
        }
        case "SET_NODES": {
            return {...action.payload};
        }
        case "ADD_NODE": {
            return { ...state, [action.payload.id]: action.payload };
        }
        case "REMOVE_NODE": {
            const newState = { ...state };
            delete newState[action.payload];
            return newState;
        }
        case "UPDATE_NODE_STATE": {
            const node = action.payload.node as TNode;
            const newState: { [key: string]: any } = { ...node.State };

            newState[action.payload.name] = action.payload.value;
            node.State = newState;
            const updatedNode = node;

            return { ...state, [updatedNode.id]: updatedNode };
        }
        case "UPDATE_NODE": {
            const updatedNode = action.payload as TNode;

            return { ...state, [updatedNode.id]: {...updatedNode} };
        }

        default:
            throw new Error();
    }
};

export type EdgeAction =
    | { type: "CLEAR" }
    | { type: 'RENDER' }
    | { type: "SET_EDGES"; payload: Record<string, TEdge> }
    | { type: "ADD_EDGE"; payload: TEdge }
    | { type: "REMOVE_EDGE"; payload: string }
    | { type: "UPDATE_EDGE"; payload: TEdge };

export const edgeReducer = (
    state: Record<string, TEdge>,
    action: EdgeAction
): Record<string, TEdge> => {
    switch (action.type) {
        case "CLEAR": {
            return {};
        }
        case "RENDER": {
            return {...state};
        }
        case "SET_EDGES": {
            return {...action.payload};
        }
        case "ADD_EDGE": {
            return { ...state, [action.payload.id]: action.payload };
        }
        case "REMOVE_EDGE": {
            const newState = { ...state };
            delete newState[action.payload];
            return newState;
        }
        case "UPDATE_EDGE": {
            const updatedNode = action.payload;
            return { ...state, [updatedNode.id]: updatedNode };
        }
        default:
            throw new Error();
    }
};


export type StoreAction =
    | { type: "SET", value: Record<string, any> }
    | { type?: "SET_VARIABLE", name: string, value: any }
    | { type: "DELETE", name: string };

export const storeReducer = (
    store: Record<string, any>,
    action: StoreAction
): Record<string, any> => {
    switch (action.type) {
        case "SET": {
            return {...action.value};
        }
        case "DELETE": {
            const newStore: Record<string, any> = { ...store };
            delete newStore[action.name];
            return newStore;
        }
    }

    const newStore: Record<string, any> = { ...store };
    newStore[action.name] = action.value;
    
    return newStore;
};


export type EventStoreAction =
    | { type: "SET", value: Record<string, any> }
    | { type?: "SET_EVENT", name: string, value: any }
    | { type: "DELETE", name: string };

export const eventStoreReducer = (
    eventStore: Record<string, any>,
    action: EventStoreAction
): Record<string, any> => {
    switch (action.type) {
        case "SET": {
            return {...action.value};
        }
        case "DELETE": {
            const newStore: Record<string, any> = { ...eventStore };
            delete newStore[action.name];
            return newStore;
        }
    }

    return { 
        ...eventStore,
        [action.name]: action.value
    };
};
