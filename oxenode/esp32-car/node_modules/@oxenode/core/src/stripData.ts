import { TEdge, TNode } from "./types";

interface viewData {
    nodes: Record<string, TNode>
    edges: Record<string, TEdge>
}

interface minimalViewData {
    nodes: Record<string, Partial<TNode>>
    edges: Record<string, Partial<TEdge>>
}

export function stripData(data: viewData): minimalViewData {

    const removeId = (obj: Partial<TNode | TEdge>) => {
        const value = {...obj};
        delete value.id;
        return value;
    }

    const removeVisualRep = (edge: Partial<TEdge>) => {
        const value = { ...edge };
        delete value.end;
        delete value.start;
        return value;
    }

    const nodes = Object.entries(data.nodes).reduce<any>((acc, cur) => {
        acc[cur[0]] = removeId(cur[1]);
        return acc;
    }, {})


    const edges = Object.entries(data.edges).reduce<any>((acc, cur) => {
        acc[cur[0]] = removeVisualRep(removeId(cur[1]));
        return acc;
    }, {})

    return { nodes, edges };

}