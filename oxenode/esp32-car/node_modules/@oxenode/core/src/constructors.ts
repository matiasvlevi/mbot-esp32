import { uuid } from './id'

import { VisualNode, VisualPort, TNode, TPort } from './types';

/**
 * Create an instance of a port
 * 
 * @param port The port blueprint
 * @returns 
 */
export const constructPort = (port: VisualPort, i: number, rootPort?: TPort): TPort => {

  if (port.range) {
    return ({
      ...port,
      type: Array.isArray(port.type) ? port.type[0] : port.type,
      edgeIds: [],
      Cache: {},
      range: rootPort ? undefined : {
        ...port.range,
        ports: []
      },
      id: rootPort ? 
        `${(rootPort.id || '').replace('_root', '')}_${i}` :
        `port_range_${i}_root` 
        
    });
  }


  return ({
    ...port,
    type: Array.isArray(port.type) ? port.type[0] : port.type,
    edgeIds: [],
    Cache: {},
    id: 'port_' + (port.label || i)//uuid('port')
  });


}

/**
 * This method acts as a constructor for blueprint nodes
 * 
 * @param node The node blueprint 
 * @param x The X position of the node
 * @param y The Y position of the node
 * @returns 
 */
export function constructNode(node: VisualNode, x = 0, y = 0, id = undefined): TNode {
    return {
      State: node.State || {},
      signature: node.signature,
      id: id || uuid('node'),
      ports: Object.values({...node.ports}).map((p, i) => constructPort(p, i)) || [],
      position: { x, y }
    }
}