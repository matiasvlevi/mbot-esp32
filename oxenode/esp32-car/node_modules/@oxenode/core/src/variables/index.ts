export const JStoOxenodeType: Record<string, string> = {
    object: "data",
    instance: "instance", 
    string: "string",
    number: "number",
    boolean: "boolean",
    function: "function",
};

export const defaultOxenodeValues: Record<string, any> = {
    number: 0,
    string: "",
    boolean: true,
    data: {},
    instance: {},
    function: () => {},
};


export const StringToOxenodeType: Record<string, any> = {
    number: (text: string) => parseInt(text, 10),
    string: (text: string) => text,
    boolean: (text: string) => {
        if (text === "false") return false;
        if (text === "true") return true;
        
        return undefined;
    },
    instance: (text: string) => {
        try {
            // TODO:
            // this could potentially preserve the instance 
            return JSON.parse(text)
        } catch(e) {
            return undefined;
        }
    },
    data: (text: string) => {
        try {
            return JSON.parse(text)
        } catch(e) {
            return undefined;
        }
    },
    function: (text: string) => {
        // TODO: MAKE THIS WORK
        try {
            const f = eval(text);
            if (f instanceof Function) return undefined;
            else undefined;
        } catch(e) {
            return undefined;
        }
    },
};

export const OxenodeTypes = Object.keys(defaultOxenodeValues);

export function shortenString(text: string, len: number, end: string="") {
    if (text.length > len) return text.slice(0, len - end.length) + end;

    return text;
}

export function toString(value: any) {
    if (value === undefined) return "undefined";

    if (typeof value === "object") {
        return JSON.stringify(value);
    } else if (typeof value === "string") {
        return value;
    } else {
        return value.toString();
    }
}

export function fromString(type: string, textValue: string) {
    if (!OxenodeTypes.includes(type)) return undefined;

    return StringToOxenodeType[type](textValue);
}