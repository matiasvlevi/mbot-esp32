import { VisualPort, PortTypes, TPortRange } from "./types"

export class PortBlueprint {
    _range?: TPortRange;
    port: Omit<VisualPort, 'signature'>;

    public type(newTypes: PortTypes | PortTypes[]) {
        if (Array.isArray(newTypes)) {
            this.port.type = 
                this.port.type.concat(newTypes);
        } else {
            this.port.type.push(newTypes);
        }

        return this;
    }

    public label(label: string) {
        this.port.label = label;

        return this;
    }

    public range(min: number, max: number) {

        this._range = {
            ports: [],
            min, max
        };

        return this;
    }
}

class InputPortBlueprint extends PortBlueprint {
    constructor() {
        super();
        this.port = { role: 'input', type: [] };
    }
}

class OutputPortBlueprint extends PortBlueprint {
    constructor() {
        super();
        this.port = { role: 'output', type: [] };
    }

    public onFetch(cb: (...inputs:any) => any) {
        this.port.Fetch = cb;

        return this;
    }
}

export const port = {
    input: () => new InputPortBlueprint(),
    output: () => new OutputPortBlueprint(),
}