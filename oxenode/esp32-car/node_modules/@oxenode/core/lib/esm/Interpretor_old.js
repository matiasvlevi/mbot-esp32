var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
export function fetchNode(blueprints, nodes, edges, port) {
    return __awaiter(this, void 0, void 0, function () {
        var values, _loop_1, _i, _a, edgeId, globalState, i, portId;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    values = {};
                    if (!port.edgeIds) return [3 /*break*/, 4];
                    _loop_1 = function (edgeId) {
                        var inputEdge, _c, nodeId, portId, inputNode, inputPort, bp, previousValues, _d, _e, port_1, newValues, i_1, portBp, ret, _f, _g;
                        return __generator(this, function (_h) {
                            switch (_h.label) {
                                case 0:
                                    inputEdge = edges[edgeId];
                                    _c = inputEdge.from, nodeId = _c.nodeId, portId = _c.portId;
                                    inputNode = nodes[nodeId || ''];
                                    inputPort = inputNode.ports.find(function (port) { return port.id === portId; }) || inputNode.ports[0];
                                    bp = blueprints[inputNode.signature];
                                    previousValues = {};
                                    if (!(inputPort.edgeIds && inputPort.edgeIds.length > 0)) return [3 /*break*/, 4];
                                    _d = 0, _e = inputNode.ports;
                                    _h.label = 1;
                                case 1:
                                    if (!(_d < _e.length)) return [3 /*break*/, 4];
                                    port_1 = _e[_d];
                                    if (port_1.role === 'output' || port_1.type === 'trigger')
                                        return [3 /*break*/, 3];
                                    return [4 /*yield*/, fetchNode(blueprints, nodes, edges, port_1)];
                                case 2:
                                    newValues = (_h.sent());
                                    i_1 = 0;
                                    while (previousValues[i_1] !== undefined &&
                                        newValues[i_1] !== undefined) {
                                        newValues[i_1 + 1] = newValues[i_1];
                                        delete newValues[i_1];
                                        i_1++;
                                    }
                                    previousValues = __assign(__assign({}, previousValues), newValues);
                                    _h.label = 3;
                                case 3:
                                    _d++;
                                    return [3 /*break*/, 1];
                                case 4:
                                    portBp = bp.ports[inputPort.signature] || {};
                                    if (!portBp.Fetch) return [3 /*break*/, 7];
                                    ret = portBp.Fetch({
                                        node: inputNode,
                                        state: inputNode.State,
                                        inputs: previousValues
                                    });
                                    if (!(ret instanceof Promise)) return [3 /*break*/, 6];
                                    _f = values;
                                    _g = portId;
                                    return [4 /*yield*/, ret];
                                case 5:
                                    _f[_g] = _h.sent();
                                    return [3 /*break*/, 7];
                                case 6:
                                    values[portId] = ret;
                                    _h.label = 7;
                                case 7: return [2 /*return*/];
                            }
                        });
                    };
                    _i = 0, _a = port.edgeIds;
                    _b.label = 1;
                case 1:
                    if (!(_i < _a.length)) return [3 /*break*/, 4];
                    edgeId = _a[_i];
                    return [5 /*yield**/, _loop_1(edgeId)];
                case 2:
                    _b.sent();
                    _b.label = 3;
                case 3:
                    _i++;
                    return [3 /*break*/, 1];
                case 4:
                    ;
                    globalState = {};
                    i = 0;
                    for (portId in values) {
                        globalState[port.label || "".concat(i)] = values[portId];
                        i++;
                    }
                    return [2 /*return*/, globalState];
            }
        });
    });
}
export function execTriggeredNodes(blueprints, nodes, edges, startNode, dispatchNode) {
    var _a;
    return __awaiter(this, void 0, void 0, function () {
        var triggers, updateNode, _loop_2, _i, triggers_1, trigger;
        var _this = this;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    triggers = startNode.ports.filter(function (port) {
                        return port.type === "trigger" && port.role === 'output';
                    });
                    if (triggers.length < 0)
                        return [2 /*return*/];
                    updateNode = function (node) { return dispatchNode({
                        type: 'UPDATE_NODE',
                        payload: node
                    }); };
                    _loop_2 = function (trigger) {
                        var _loop_3, _c, _d, edgeId;
                        return __generator(this, function (_e) {
                            switch (_e.label) {
                                case 0:
                                    if (!trigger.edgeIds)
                                        return [2 /*return*/, "continue"];
                                    _loop_3 = function (edgeId) {
                                        var edge, node, previousValues, _f, _g, port, _h, controller, bp;
                                        return __generator(this, function (_j) {
                                            switch (_j.label) {
                                                case 0:
                                                    edge = edges[edgeId];
                                                    if (!edge) {
                                                        return [2 /*return*/, "continue"];
                                                    }
                                                    ;
                                                    node = nodes[((_a = edge.to) === null || _a === void 0 ? void 0 : _a.nodeId) || ''];
                                                    previousValues = {};
                                                    _f = 0, _g = node.ports;
                                                    _j.label = 1;
                                                case 1:
                                                    if (!(_f < _g.length)) return [3 /*break*/, 4];
                                                    port = _g[_f];
                                                    if (port.type === 'trigger' ||
                                                        port.role === 'output')
                                                        return [3 /*break*/, 3];
                                                    _h = [__assign({}, previousValues)];
                                                    return [4 /*yield*/, fetchNode(blueprints, nodes, edges, port)];
                                                case 2:
                                                    previousValues = __assign.apply(void 0, _h.concat([(_j.sent())]));
                                                    _j.label = 3;
                                                case 3:
                                                    _f++;
                                                    return [3 /*break*/, 1];
                                                case 4:
                                                    controller = {
                                                        update: updateNode,
                                                        trigger: function (portIndex) { return __awaiter(_this, void 0, void 0, function () {
                                                            var port, id, i;
                                                            var _a;
                                                            return __generator(this, function (_b) {
                                                                switch (_b.label) {
                                                                    case 0:
                                                                        if (!trigger.edgeIds)
                                                                            return [2 /*return*/];
                                                                        port = triggers[portIndex];
                                                                        if (!port)
                                                                            return [2 /*return*/];
                                                                        console.log(port);
                                                                        id = ((_a = edges[edgeId || ''].to) === null || _a === void 0 ? void 0 : _a.nodeId) || '';
                                                                        if (!port.edgeIds) return [3 /*break*/, 4];
                                                                        i = 0;
                                                                        _b.label = 1;
                                                                    case 1:
                                                                        if (!(i < port.edgeIds.length)) return [3 /*break*/, 4];
                                                                        console.log(port.edgeIds[i]);
                                                                        return [4 /*yield*/, execTriggeredNodes(blueprints, nodes, edges, nodes[id], dispatchNode)];
                                                                    case 2:
                                                                        _b.sent();
                                                                        _b.label = 3;
                                                                    case 3:
                                                                        i++;
                                                                        return [3 /*break*/, 1];
                                                                    case 4: return [2 /*return*/];
                                                                }
                                                            });
                                                        }); }
                                                    };
                                                    bp = blueprints[startNode.signature];
                                                    if (!bp.Trigger) return [3 /*break*/, 6];
                                                    return [4 /*yield*/, bp.Trigger({
                                                            node: node,
                                                            inputs: previousValues,
                                                            state: node.State,
                                                            controller: controller
                                                        })];
                                                case 5:
                                                    _j.sent();
                                                    _j.label = 6;
                                                case 6:
                                                    if (trigger.edgeIds.length === 1) {
                                                        console.log('Default trigger');
                                                        controller.trigger(0);
                                                    }
                                                    return [2 /*return*/];
                                            }
                                        });
                                    };
                                    _c = 0, _d = trigger.edgeIds;
                                    _e.label = 1;
                                case 1:
                                    if (!(_c < _d.length)) return [3 /*break*/, 4];
                                    edgeId = _d[_c];
                                    return [5 /*yield**/, _loop_3(edgeId)];
                                case 2:
                                    _e.sent();
                                    _e.label = 3;
                                case 3:
                                    _c++;
                                    return [3 /*break*/, 1];
                                case 4:
                                    ;
                                    return [2 /*return*/];
                            }
                        });
                    };
                    _i = 0, triggers_1 = triggers;
                    _b.label = 1;
                case 1:
                    if (!(_i < triggers_1.length)) return [3 /*break*/, 4];
                    trigger = triggers_1[_i];
                    return [5 /*yield**/, _loop_2(trigger)];
                case 2:
                    _b.sent();
                    _b.label = 3;
                case 3:
                    _i++;
                    return [3 /*break*/, 1];
                case 4: return [2 /*return*/];
            }
        });
    });
}
;
export function exec(blueprints, nodes, edges, dispatchNode) {
    return __awaiter(this, void 0, void 0, function () {
        var BeginNode;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    BeginNode = Object.values(nodes)
                        .find(function (node) {
                        return node.signature === "Begin";
                    });
                    if (!BeginNode) {
                        // TODO: HANDLE ERROR
                        // No Begin Node Found
                        console.error('No Begin Node found');
                        return [2 /*return*/];
                    }
                    return [4 /*yield*/, execTriggeredNodes(blueprints, nodes, edges, BeginNode, dispatchNode)];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
