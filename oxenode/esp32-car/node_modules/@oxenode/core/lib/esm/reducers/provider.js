import { jsx as _jsx } from "react/jsx-runtime";
import React from 'react';
import { nodesReducer, edgeReducer, storeReducer, eventStoreReducer } from './reducers';
import { NodeContext } from '../NodeContext';
import { EdgeContext } from '../EdgeContext';
import { DragContext } from '../DragContext';
import { StoreContext } from '../StoreContext';
import { EventStoreContext } from '../EventStoreContext';
export function NodeStateProvider({ nodes = {}, children }) {
    const [nodeState, dispatchNode] = React.useReducer(nodesReducer, nodes);
    return (_jsx(NodeContext.Provider, { value: { nodeState, dispatchNode }, children: children }));
}
export function EdgeStateProvider({ edges = {}, children }) {
    const [edgeState, dispatchEdge] = React.useReducer(edgeReducer, edges);
    return (_jsx(EdgeContext.Provider, { value: { edgeState, dispatchEdge }, children: children }));
}
export function DragStateProvider({ children }) {
    const [isFocused, setIsFocused] = React.useState(false);
    return (_jsx(DragContext.Provider, { value: { isFocused, setIsFocused }, children: children }));
}
export function StoreStateProvider({ children }) {
    const [store, setStoreItem] = React.useReducer(storeReducer, {});
    return (_jsx(StoreContext.Provider, { value: { store, setStoreItem }, children: children }));
}
export function EventStoreProvider({ children }) {
    const [eventStore, setEventStoreItem] = React.useReducer(eventStoreReducer, {
        'begin': {
            id: 'play'
        }
    });
    return (_jsx(EventStoreContext.Provider, { value: { eventStore, setEventStoreItem }, children: children }));
}
