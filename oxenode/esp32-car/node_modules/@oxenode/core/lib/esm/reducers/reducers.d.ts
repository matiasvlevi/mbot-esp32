import { TNode, TEdge } from "../types";
export type UpdateNodeStateOptions = {
    name: string;
    value: string;
    node: TNode;
};
export type NodeAction = {
    type: "CLEAR";
} | {
    type: 'RENDER';
} | {
    type: "SET_NODES";
    payload: Record<string, TNode>;
} | {
    type: "ADD_NODE";
    payload: TNode;
} | {
    type: "REMOVE_NODE";
    payload: string;
} | {
    type: "UPDATE_NODE";
    payload: TNode;
} | {
    type: "UPDATE_NODE_STATE";
    payload: UpdateNodeStateOptions;
};
export declare const nodesReducer: (state: Record<string, TNode>, action: NodeAction) => Record<string, TNode>;
export type EdgeAction = {
    type: "CLEAR";
} | {
    type: 'RENDER';
} | {
    type: "SET_EDGES";
    payload: Record<string, TEdge>;
} | {
    type: "ADD_EDGE";
    payload: TEdge;
} | {
    type: "REMOVE_EDGE";
    payload: string;
} | {
    type: "UPDATE_EDGE";
    payload: TEdge;
};
export declare const edgeReducer: (state: Record<string, TEdge>, action: EdgeAction) => Record<string, TEdge>;
export type StoreAction = {
    type: "SET";
    value: Record<string, any>;
} | {
    type?: "SET_VARIABLE";
    name: string;
    value: any;
} | {
    type: "DELETE";
    name: string;
};
export declare const storeReducer: (store: Record<string, any>, action: StoreAction) => Record<string, any>;
export type EventStoreAction = {
    type: "SET";
    value: Record<string, any>;
} | {
    type?: "SET_EVENT";
    name: string;
    value: any;
} | {
    type: "DELETE";
    name: string;
};
export declare const eventStoreReducer: (eventStore: Record<string, any>, action: EventStoreAction) => Record<string, any>;
