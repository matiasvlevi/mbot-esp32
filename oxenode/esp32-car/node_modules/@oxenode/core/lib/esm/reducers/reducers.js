export const nodesReducer = (state, action) => {
    switch (action.type) {
        case "CLEAR": {
            return {};
        }
        case "RENDER": {
            return { ...state };
        }
        case "SET_NODES": {
            return { ...action.payload };
        }
        case "ADD_NODE": {
            return { ...state, [action.payload.id]: action.payload };
        }
        case "REMOVE_NODE": {
            const newState = { ...state };
            delete newState[action.payload];
            return newState;
        }
        case "UPDATE_NODE_STATE": {
            const node = action.payload.node;
            const newState = { ...node.State };
            newState[action.payload.name] = action.payload.value;
            node.State = newState;
            const updatedNode = node;
            return { ...state, [updatedNode.id]: updatedNode };
        }
        case "UPDATE_NODE": {
            const updatedNode = action.payload;
            return { ...state, [updatedNode.id]: { ...updatedNode } };
        }
        default:
            throw new Error();
    }
};
export const edgeReducer = (state, action) => {
    switch (action.type) {
        case "CLEAR": {
            return {};
        }
        case "RENDER": {
            return { ...state };
        }
        case "SET_EDGES": {
            return { ...action.payload };
        }
        case "ADD_EDGE": {
            return { ...state, [action.payload.id]: action.payload };
        }
        case "REMOVE_EDGE": {
            const newState = { ...state };
            delete newState[action.payload];
            return newState;
        }
        case "UPDATE_EDGE": {
            const updatedNode = action.payload;
            return { ...state, [updatedNode.id]: updatedNode };
        }
        default:
            throw new Error();
    }
};
export const storeReducer = (store, action) => {
    switch (action.type) {
        case "SET": {
            return { ...action.value };
        }
        case "DELETE": {
            const newStore = { ...store };
            delete newStore[action.name];
            return newStore;
        }
    }
    const newStore = { ...store };
    newStore[action.name] = action.value;
    return newStore;
};
export const eventStoreReducer = (eventStore, action) => {
    switch (action.type) {
        case "SET": {
            return { ...action.value };
        }
        case "DELETE": {
            const newStore = { ...eventStore };
            delete newStore[action.name];
            return newStore;
        }
    }
    return {
        ...eventStore,
        [action.name]: action.value
    };
};
