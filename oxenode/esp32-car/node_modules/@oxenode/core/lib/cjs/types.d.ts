import React from "react";
export interface TPosition {
    x: number;
    y: number;
}
export interface TConnection {
    nodeId: string;
    portId: string;
}
export interface TEdge {
    id: string;
    type: string;
    start: TPosition;
    end: TPosition;
    from: TConnection;
    to: TConnection;
}
export type Roles = 'input' | 'output';
export type PortTypes = 'trigger' | 'data' | 'string' | 'number' | 'boolean' | 'function';
export interface TPort {
    signature: string;
    id?: string;
    type: string;
    label?: string;
    filled?: boolean;
    edgeIds?: string[];
    role: Roles;
    Cache?: any;
}
export type Plugin = {
    blueprints: Record<string, VisualNode>;
    name: string;
};
export interface VisualPort {
    signature: string;
    type: string[];
    label?: string;
    role: Roles;
    Fetch?: (...args: any[]) => any;
}
export interface TNode {
    signature: string;
    id: string;
    position: TPosition;
    ports: TPort[];
    State: Record<string, any>;
}
export interface PluginIndex {
    name: string;
    version: string;
    date: string;
    icon: string;
    blueprints: string[];
    size: number;
    cdnEntry: string;
}
export interface VisualNode {
    Content: React.FC<{}> | React.LazyExoticComponent<any>;
    Trigger?: (...args: any[]) => any;
    Fetch?: (...args: any[]) => any;
    signature: string;
    plugin: string;
    Name: string;
    ports: Record<string, VisualPort>;
    State?: Record<string, any>;
}
export interface TMenuItem {
    id: string;
    Icon: React.FC<{}>;
    onClick: (e: React.MouseEvent<HTMLElement>) => void;
    label: string;
}
export interface TMenuPos {
    side: string;
    align: string;
}
export interface TConfig {
    mainMenu: TMenuPos;
    contactMenu: TMenuPos;
    debug: boolean;
    showState: boolean;
}
