import React from "react";

import { DragContext, NodeContext } from "@oxenode/core";

type TextInputProps = React.PropsWithChildren<{
  style: React.CSSProperties;
  title?: string;
  name: string;
  nodeId: string;
  value?: string;
}>;

export default function TextInput({
  style = {},
  title = "",
  name = "",
  nodeId,
  value = "",
}: TextInputProps) {
  const { setIsFocused } = React.useContext(DragContext);
  const { nodeState, dispatchNode } = React.useContext(NodeContext);
  const node = nodeState[nodeId];

  if (typeof node.State[name] === "string") value = node.State[name];

  const handleOnChange = (e: any) => {
    dispatchNode({
      type: "UPDATE_NODE_STATE",
      payload: {
        node,
        name,
        value: e.target.value,
      },
    });
  };

  React.useEffect(() => {
    dispatchNode({
      type: "UPDATE_NODE_STATE",
      payload: { node, name, value },
    });
  }, [value]);

  const message = (nodeState[nodeId].State || {})[name] || "";
  const messageLength = message.length || 0;

  return (
    <div
      style={{ width: `${Math.min(18, messageLength + 4)}rem` }}
      className="textArea"
    >
      {title.length > 0 ? <h4>{title}</h4> : <></>}
      <input
        style={{
          ...style,
          width: `${Math.min(18, messageLength + 2)}rem`,
          margin: "0px",
          padding: "0.4rem 1rem 0.4rem 1rem",
        }}
        onFocus={() => setIsFocused(true)}
        onBlur={() => setIsFocused(false)}
        type="text"
        value={message}
        onChange={handleOnChange}
      />
    </div>
  );
}
