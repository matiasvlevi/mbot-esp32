"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const react_textarea_code_editor_1 = __importDefault(require("@uiw/react-textarea-code-editor"));
const core_1 = require("@oxenode/core");
const ThemeContext_1 = require("./Theme/ThemeContext");
const adaptiveFontSize = (len) => {
    if (len < 10)
        return 28;
    else if (len >= 10 && len < 20)
        return 24;
    else if (len >= 20 && len < 32)
        return 22;
    else if (len >= 32 && len < 120)
        return 18;
    else if (len >= 120 && len < 240)
        return 16;
    else if (len >= 240 && len < 360)
        return 14;
    else if (len >= 360 && len < 1024)
        return 12;
    else
        return 10;
};
function Textarea({ name = "", nodeId, value = "", width = "75rem", language = "handlebars", style = {}, }) {
    const { setIsFocused } = (0, react_1.useContext)(core_1.DragContext);
    const { nodeState, dispatchNode } = (0, react_1.useContext)(core_1.NodeContext);
    const node = nodeState[nodeId];
    const { theme } = (0, react_1.useContext)(ThemeContext_1.ThemeContext);
    if (typeof node.State[name] === "string")
        value = node.State[name];
    const handleOnChange = (e) => {
        dispatchNode({
            type: "UPDATE_NODE_STATE",
            payload: {
                node,
                name,
                value: e.target.value,
            },
        });
    };
    (0, react_1.useEffect)(() => {
        dispatchNode({
            type: "UPDATE_NODE_STATE",
            payload: { node, name, value },
        });
    }, [value]);
    const content = (nodeState[nodeId].State || {})[name] || "";
    return (react_1.default.createElement("div", { className: "textArea" },
        react_1.default.createElement(react_textarea_code_editor_1.default, { onFocus: () => setIsFocused(true), onBlur: () => setIsFocused(false), "data-color-mode": theme, value: content, language: language, onChange: handleOnChange, padding: 18, style: {
                borderRadius: "8px",
                fontSize: adaptiveFontSize(content.length),
                resize: "none",
                minHeight: "2rem",
                overflowX: "hidden",
                maxWidth: width,
                backgroundColor: 'var(--dark-1, #181818)',
                fontFamily: "ui-monospace,SFMono-Regular,SF Mono,Consolas,Liberation Mono,Menlo,monospace",
                ...style
            } })));
}
exports.default = Textarea;
