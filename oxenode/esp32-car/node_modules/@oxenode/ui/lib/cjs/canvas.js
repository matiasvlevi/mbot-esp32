"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const core_1 = require("@oxenode/core");
const delay = async (t) => new Promise((res) => {
    setTimeout(res, t);
});
function Canvas({ nodeId, name = "draw" }) {
    const ref = react_1.default.useRef(null);
    const [isPlaying, setIsPlaying] = (0, react_1.useState)(false);
    const { nodeState } = react_1.default.useContext(core_1.NodeContext);
    react_1.default.useEffect(() => {
        const canvas = ref.current;
        const ctx = canvas.getContext("2d");
        if (!ctx)
            return;
        if (isPlaying)
            return;
        if (nodeState[nodeId].State[name + "_setup"]) {
            setIsPlaying(true);
            try {
                nodeState[nodeId].State[name + "_setup"](ctx || {});
                if (nodeState[nodeId].State[name + "_loop"]) {
                    const _loop = async () => {
                        let i = 0;
                        while (i < 1000) {
                            nodeState[nodeId].State[name + "_loop"](ctx || {}, i);
                            await delay(16);
                            i++;
                        }
                    };
                    _loop().then(_ => console.log('FINISHED'));
                    setIsPlaying(false);
                }
            }
            catch (e) {
                console.log(e);
            }
        }
    }, [ref, isPlaying, nodeState]);
    return react_1.default.createElement("canvas", { ref: ref, width: "200", height: "200" });
}
exports.default = Canvas;
