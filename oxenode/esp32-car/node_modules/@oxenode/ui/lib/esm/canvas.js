import React, { useState } from "react";
import { NodeContext } from "@oxenode/core";
const delay = async (t) => new Promise((res) => {
    setTimeout(res, t);
});
export default function Canvas({ nodeId, name = "draw" }) {
    const ref = React.useRef(null);
    const [isPlaying, setIsPlaying] = useState(false);
    const { nodeState } = React.useContext(NodeContext);
    React.useEffect(() => {
        const canvas = ref.current;
        const ctx = canvas.getContext("2d");
        if (!ctx)
            return;
        if (isPlaying)
            return;
        if (nodeState[nodeId].State[name + "_setup"]) {
            setIsPlaying(true);
            try {
                nodeState[nodeId].State[name + "_setup"](ctx || {});
                if (nodeState[nodeId].State[name + "_loop"]) {
                    const _loop = async () => {
                        let i = 0;
                        while (i < 1000) {
                            nodeState[nodeId].State[name + "_loop"](ctx || {}, i);
                            await delay(16);
                            i++;
                        }
                    };
                    _loop().then(_ => console.log('FINISHED'));
                    setIsPlaying(false);
                }
            }
            catch (e) {
                console.log(e);
            }
        }
    }, [ref, isPlaying, nodeState]);
    return React.createElement("canvas", { ref: ref, width: "200", height: "200" });
}
